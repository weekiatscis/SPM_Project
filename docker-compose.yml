services:

  # Message Queue for real-time notifications
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
      - RABBITMQ_LOG_LEVEL=warning
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 10s
      retries: 8
      start_period: 30s

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: ./src/microservices/notifications/Dockerfile
    ports:
      - "8084:8084"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672
      - PORT=8084
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FROM_EMAIL=${FROM_EMAIL}
      - FROM_NAME=${FROM_NAME}
      - FRONTEND_URL=${FRONTEND_URL}
    command: ["python", "notification_service.py"]
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/notifications?user_id=test"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s


  task-service:
    build:
      context: .
      dockerfile: ./src/microservices/tasks/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672
      - NOTIFICATION_SERVICE_URL=http://notification-service:8084
      - PORT=8080
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FROM_EMAIL=${FROM_EMAIL}
      - FROM_NAME=${FROM_NAME}
      - FRONTEND_URL=${FRONTEND_URL}
    depends_on:
      rabbitmq:
        condition: service_healthy
      notification-service:
        condition: service_started
    command: ["python", "task_service.py"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/tasks"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  project-service:
    build:
      context: .
      dockerfile: ./src/microservices/projects/Dockerfile
    ports:
      - "8082:8082"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - PORT=8082
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672
      - NOTIFICATION_SERVICE_URL=http://notification-service:8084
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FROM_EMAIL=${FROM_EMAIL}
      - FROM_NAME=${FROM_NAME}
      - FRONTEND_URL=${FRONTEND_URL}
    command: ["python", "project_service.py"]
    depends_on:
      rabbitmq:
        condition: service_healthy
      notification-service:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/projects"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  user-service:
    build:
      context: .
      dockerfile: ./src/microservices/users/Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - VITE_TASK_OWNER_ID=${VITE_TASK_OWNER_ID}
      - PORT=8081
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672
    command: ["python", "user_service.py"]
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/users"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  auth-service:
    build:
      context: .
      dockerfile: ./src/microservices/users/Dockerfile
    ports:
      - "8086:8086"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - PORT=8086
    command: ["python", "userAuthentication.py"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8086/health"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  report-service:
    build:
      context: .
      dockerfile: ./src/microservices/reports/Dockerfile
    ports:
      - "8090:8090"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - TASK_SERVICE_URL=http://task-service:8080
      - PROJECT_SERVICE_URL=http://project-service:8082
      - USER_SERVICE_URL=http://user-service:8081
      - PORT=8090
    depends_on:
      task-service:
        condition: service_healthy
      project-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
    command: ["python", "report_service.py"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8090/health"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

volumes:
  rabbitmq_data: